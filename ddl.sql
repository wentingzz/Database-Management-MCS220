USE Interchange;
DROP DATASET TypedUser IF EXISTS;
DROP TYPE UserType IF EXISTS;
CREATE TYPE UserType AS {
    _oid: uuid,
    user_id: string,
    email: string,
    joined_date: string,
    name: {first: string, last: string},
    phone: [{number:string, kind:string}],
    categories: [string],
    is_buyer: boolean,
    is_seller: boolean
};

CREATE DATASET TypedUser(UserType) PRIMARY KEY _oid AUTOGENERATED;

INSERT INTO TypedUser (SELECT VALUE u FROM User u LIMIT 10);


USE Interchange;
SELECT u.email, u.name, u.address.zip
FROM User u
WHERE u.is_buyer = true AND u.is_seller = true AND u.address.state = 'West Virginia'
ORDER BY u.address.zip ASC;


USE Interchange;
SELECT u.user_id, u.name.last, r.quality
FROM User u, Ratings r
WHERE r.seller_id = (SELECT VALUE i.seller.user_id FROM Item i WHERE i.item_id = 'G9WMY')[0] AND u.user_id = r.buyer_id
ORDER BY r.quality DESC;

USE Interchange;
SELECT u.name, u.email, u.categories
FROM User as u
WHERE ends_with(u.email, 'aol.com') AND (SOME AND EVERY i in u.categories SATISFIES starts_with(i, "D"))

USE Interchange;
SELECT VALUE {
"user_id": u.user_id,
"user_name": concat(u.name.last, ", ", u.name.first),
"mobile": p.number
}
FROM User as u UNNEST u.phone as p, Item as i
WHERE u.user_id = i.seller.user_id AND i.seller.list_date = '2022-07-17' AND p.kind = 'mobile'
ORDER BY user_name ASC;


USE Interchange;
SELECT VALUE{
	"item_id": i.item_id,
    "item_name": i.name,
    "item_price": i.price,
    "category": i.category,
    "advertisement": {
      "ad": (ad.ad_id, ad.plan),
      "pic_count": array_count(g)
    }
}
FROM Item i, Ad ad, Picture p
WHERE i.buyer IS UNKNOWN AND i.is_service = TRUE AND ad.seller.user_id = i.seller.user_id AND p.item_id = i.item_id AND i.item_id = ad.item_id
GROUP BY i.item_id, i.name, i.price, i.category, ad.ad_id, ad.plan GROUP as g;

USE Interchange;
SELECT i.category, i.frequency, COUNT(i.item_id) as count
FROM Item i
WHERE i.is_service = TRUE
GROUP BY ROLLUP(i.category, i.frequency)
ORDER BY i.category ASC, i.frequency ASC;


USE Interchange;
SELECT i1.item_id, i1.price, i1.buyer.purchase_date, i1.category, i1.i_rank
FROM (
  SELECT i.item_id, i.price, i.buyer.purchase_date, i.category, RANK() OVER (PARTITION by i.category ORDER BY i.price DESC) as i_rank
  FROM Item i
  WHERE i.buyer IS NOT MISSING
) i1
WHERE i1.i_rank <= 3
ORDER BY i1.category, i1.i_rank


USE Interchange;
UPSERT INTO Item (
  SELECT i1._oid, i1.item_id, i1.name, p.hprice as price, i1.category, i1.description, i1.is_good, i1.is_service, i1.frequency, i1.seller, i1.buyer
  FROM (
    SELECT i._oid, i.item_id, i.name, i.price, i.category, i.description, i.is_good, i.is_service, i.frequency, i.seller, i.buyer, RANK() OVER (PARTITION by i.category ORDER BY i.price DESC) as i_rank
    FROM Item i
    WHERE i.buyer IS NOT MISSING
  ) i1,
  (
    SELECT i.category, MAX(i.price) as hprice
    FROM Item i
    WHERE i.buyer IS NOT MISSING
    GROUP BY i.category
  ) p
  WHERE i1.i_rank = 2 AND p.category = i1.category
)
